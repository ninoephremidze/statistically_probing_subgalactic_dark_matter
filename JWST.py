import numpy as np
import lenstronomy.Util.kernel_util as kernel_util
import lenstronomy.Util.image_util as image_util
from lenstronomy.SimulationAPI.sim_api import SimAPI
from lenstronomy.SimulationAPI.data_api import DataAPI

##################################################################################
#                            JWST subpackage for SimAPI                          #
##################################################################################

import lenstronomy.Util.util as util

__all__ = ["JWST"]

class JWST(object):
    """Class contains JWST instrument and observation configurations."""

    def __init__(self,
                 jwst_pix, exp_time, zp, m_sky, FWHM_150, psf_file, read_noise, ccd_gain,
                 psf_type="PIXEL", band="NIRCam_F150W", coadd_years=None):
        """

        :param band: string, 'NIRCam_F150W' supported. Determines obs dictionary.
        :param psf_type: string, type of PSF ('PIXEL' supported).
        :param coadd_years: int, number of years corresponding to num_exposures in obs dict. Currently supported: None.
        """

        kernel = np.load(psf_file)

        # F160W filter configs
        NIRCam_F150W_band_obs = {
            "exposure_time": exp_time,
            "sky_brightness": m_sky,
            "magnitude_zero_point": zp,
            "num_exposures": 1,
            "seeing": FWHM_150,
            "psf_type": "PIXEL",
            "kernel_point_source":kernel}

        # - keyword exposure_time: exposure time per image (in seconds)
        # - keyword sky_brightness: sky brightness (in magnitude per square arcseconds in units of electrons)
        # - keyword magnitude_zero_point: magnitude in which 1 count (e-) per second per arcsecond square is registered
        # - keyword num_exposures: number of exposures that are combined (depends on coadd_years)
        # - keyword seeing: Full-Width-at-Half-Maximum (FWHM) of PSF
        # - keyword psf_type: string, type of PSF ('PIXEL' supported)

        if band == "NIRCam_F150W":
            self.obs = NIRCam_F150W_band_obs

        else:
            raise ValueError(
                "band %s not supported! Choose 'NIRCam_F150W' or make your band!" % band
            )

        if psf_type == "PIXEL":
            self.obs["psf_type"] = "PIXEL"
        elif psf_type != "PIXEL":
            raise ValueError("psf_type %s not supported!" % psf_type)

        if coadd_years is not None:
            raise ValueError(
                " %s coadd_years not supported! "
                "You may manually adjust num_exposures in obs dict if required."
                % coadd_years
            )

        # NIRCam Detector Settings (short-wavelength)
        self.camera = {
            "read_noise": read_noise,
            "pixel_scale": jwst_pix,  # approx pixel size for drizzled PSF
            "ccd_gain": ccd_gain,
        }

        # - keyword read_noise: std of noise generated by read-out (in units of electrons)
        # - keyword pixel_scale: scale (in arcseconds) of pixels
        # - keyword ccd_gain: electrons/ADU (analog-to-digital unit)


    def kwargs_single_band(self):
            """

            :return: merged kwargs from camera and obs dicts
            """
            kwargs = util.merge_dicts(self.camera, self.obs)
            return kwargs